#!/bin/zsh
# Personal configuration - Personal additions not for work machines
# This file is only sourced when dotfiles are installed with personal profile

# ============================================================================
# Git Platform Auto-Detect
# ============================================================================
# Detects the OS and sets GIT_PLATFORM variable so Git can load the
# appropriate ~/.gitconfig.<platform>. If platform is not recognized,
# the variable is not set and commit signing will be disabled.
# ============================================================================

case "$(uname -s)" in
  Darwin)
    export GIT_PLATFORM="macos"   # macOS + 1Password-SSH-agent
    ;;
  Linux)
    # Detect WSL separately
    if grep -qiE "microsoft|wsl" /proc/version 2>/dev/null; then
      export GIT_PLATFORM="wsl"
    else
      export GIT_PLATFORM="linux"
    fi
    ;;
  *)
    unset GIT_PLATFORM            # unknown OS â†’ signing disabled
    ;;
esac

# (Optional) show hint if signing is disabled
[[ -z "${GIT_PLATFORM}" ]] && echo "%F{yellow}[git signing disabled: unknown platform]%f"

# ============================================================================
# Git Auto-Fetch Configuration
# ============================================================================
# Automatically fetch git repositories in the background when entering them
# This keeps the local repository aware of remote changes for accurate prompt display

function git_auto_fetch() {
  if [[ -d .git ]]; then
    # Get the remote URL to check if it's a GitHub repository
    local remote_url=$(git config --get remote.origin.url 2>/dev/null)

    # Check if this is a GitHub repository
    if [[ "$remote_url" =~ github\.com ]]; then
      # For GitHub repos, use gh auth instead of local git config
      # Check GitHub authentication status
      if ! gh auth status &>/dev/null 2>&1; then
        # Not logged in to GitHub CLI, skip fetch and notify user
        echo "GitHub auto-fetch disabled: run 'gh auth login' to enable"
        return
      fi
    else
      # For non-GitHub repos, check if git user is configured
      local user_email=$(git config --get user.email 2>/dev/null)
      local user_name=$(git config --get user.name 2>/dev/null)

      # Skip fetch if no user credentials for non-GitHub repos
      if [[ -z "$user_email" ]] || [[ -z "$user_name" ]]; then
        return
      fi
    fi

    # Check if we can reach the remote (skip fetch if auth fails)
    if ! git ls-remote --exit-code -h origin &>/dev/null 2>&1; then
      return
    fi

    local fetch_marker=".git/LAST_AUTO_FETCH"
    local current_time=$(date +%s)
    local last_fetch=0

    [[ -f $fetch_marker ]] && last_fetch=$(<$fetch_marker)

    # Only fetch if 1+ minute have passed
    if (( current_time - last_fetch > 60 )); then
      (git fetch --all &>/dev/null &)
      echo $current_time > $fetch_marker
    fi
  fi
}

# Hook into directory change
autoload -U add-zsh-hook
add-zsh-hook chpwd git_auto_fetch

# Trigger on shell startup if in a git repo
git_auto_fetch

# ============================================================================
# AI/Claude Development Tools
# ============================================================================
# Claude Code CLI aliases
alias claudem="claude --mcp-config ~/.claude/.mcp.json"  # With MCPs
alias cm="claudem"                         # Short alias for claude with MCPs
alias c="claude"                           # Short alias for basic claude
alias oc="opencode"
alias cs="claude-squad"

# ============================================================================
# API Keys from pass
# ============================================================================
export OPENROUTER_API_KEY="$(pass show api/openrouter 2>/dev/null || echo '')"
export OPENAI_API_KEY="$(pass show api/openai 2>/dev/null || echo '')"

# ============================================================================
# Development Tools
# ============================================================================
# LM Studio CLI (if installed)
[[ -d "$HOME/.lmstudio/bin" ]] && export PATH="$PATH:$HOME/.lmstudio/bin"

# ============================================================================
# 1Password SSH Agent (macOS)
# ============================================================================
if [[ "$OSTYPE" == "darwin"* ]]; then
    export SSH_AUTH_SOCK="$HOME/Library/Group Containers/2BUA8C4S2C.com.1password/t/agent.sock"
fi